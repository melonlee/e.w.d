package com.melonlee.ewd.utils;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.HashMap;import com.google.gson.Gson;import com.google.gson.GsonBuilder;public class ResultKit {	static HashMap<String, Object> res = new HashMap<String, Object>();	static Gson gson = new GsonBuilder().disableHtmlEscaping().create();	/*	 * 工具类方法	 */	public static void addSuccess() {		res.put(StaticParam.RES_STATUS_STR, StaticParam.RES_STATUS_SUCCESS);	}	public static void addFail() {		res.put(StaticParam.RES_STATUS_STR, StaticParam.RES_STATUS_FAIL);	}	// 返回集合信息，做简单判断	@SuppressWarnings("rawtypes")	public static String addList(ArrayList list) {		res.put(StaticParam.RES_RESULT_STR, list);		if (list.size() < 1) {			addFail();		} else {			addSuccess();		}		return toJson();	}	// 返回bean类型信息	public static void add(String key, Object bean) {		res.put(key, bean);	}	// 操作正常返回信息	public static String success() {		addSuccess();		return toJson();	}	// 操作失败返回信息	public static String fail() {		addFail();		return toJson();	}	// 返回resJSON信息	public static String toJson() {		String str = gson.toJson(res);		res.clear();		return str;	}	public static String addBean(Object bean, int status) {		res.put(StaticParam.RES_RESULT_STR, bean);		if (status > 0) {			addSuccess();		} else {			addFail();		}		return toJson();	}	/**	 * MD5  	 */	public static String getMD5Str(String str) {		MessageDigest messageDigest = null;		try {			messageDigest = MessageDigest.getInstance("MD5");			messageDigest.reset();			messageDigest.update(str.getBytes("UTF-8"));		} catch (NoSuchAlgorithmException e) {			System.out.println("NoSuchAlgorithmException caught!");			System.exit(-1);		} catch (UnsupportedEncodingException e) {			e.printStackTrace();		}		byte[] byteArray = messageDigest.digest();		StringBuffer md5StrBuff = new StringBuffer();		for (int i = 0; i < byteArray.length; i++) {			if (Integer.toHexString(0xFF & byteArray[i]).length() == 1)				md5StrBuff.append("0").append(						Integer.toHexString(0xFF & byteArray[i]));			else				md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));		}		return md5StrBuff.toString();	}}